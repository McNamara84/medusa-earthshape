 <%= search_form_for @search, url: search_maps_path do |f| %>

<div style="float:right">

<table class="table table-condensed table-striped">
  <tbody>
      <tr><th colspan="3">  <%= text_field_tag :per_page, (params[:per_page] || SearchMap.default_per_page), size: 1 %> Entries per page 
	<%= f.button class: "btn btn-default" do %>
       <span class="glyphicon glyphicon-refresh"></span>
        <% end %></th><th></th><th></th> 
      </tr>
           
	<tr>
		<th colspan="2">Parent Location</th>
		<% regions= Place.where(is_parent: true).order(:name).pluck(:name, :name) %>		
		<th><%=f.select :place_parent_name_cont, regions, {include_blank: "select:" }, class: "form-control input-sm" %></th>		
	</tr>
        <tr>
		<th>lon</th>
		<th><%= f.text_field :place_longitude_gteq, class: "form-control input-sm", placeholder: "min:(-180<x<180)", size: 10 %></th>
		<th><%= f.text_field :place_longitude_lteq, class: "form-control input-sm", placeholder: "max:(-180<x<180)", size: 10 %></th>
	</tr>
        <tr>   
		<th>lat</th>
		<th><%= f.text_field :place_latitude_gteq, class: "form-control input-sm", placeholder: "min:(-90<x<90)", size: 10 %></th>
		<th><%= f.text_field :place_latitude_lteq, class: "form-control input-sm", placeholder: "max:(-90<x<90)", size: 10 %></th>
	</tr>      

       <tr>
		<th><span class="glyphicon glyphicon-time"/></th>
		<th><%= f.text_field :date_gteq, class: "form-control input-sm datepicker", placeholder: "from:", size: 8 %></th>
		<th><%= f.text_field :date_lteq, class: "form-control input-sm datepicker", placeholder: "to:", size: 8 %></th>
	</tr>	
        <tr>
		<th colspan="2">Sample name</th>
		<th><%= f.text_field :name_cont, class: "form-control input-sm", placeholder: "search:", size: 10 %></th>
	</tr>
        <tr>
		<th colspan="2">Material</th>
		<% classifications= Classification.joins(:stones).distinct(:name).map(&:get_material).uniq %>
		<th> <%=f.select :classification_full_name_cont, classifications, {include_blank: "select:" }, class: "form-control input-sm" %></th>
	</tr>	
        <tr>
		<th colspan="2">Collector</th>
		<th><%= f.text_field :collectors_name_cont, class: "form-control input-sm", placeholder: "search:", size: 10 %></th>			
	</tr>	
        <tr>
		<th colspan="2">Affiliation</th>
		<% classifications= Classification.joins(:stones).distinct(:name).map(&:get_material).uniq %>
		<th><%= f.text_field :collectors_affiliation_cont, class: "form-control input-sm", placeholder: "search:", size: 10 %></th>		
	</tr>
        <tr>
		<th colspan="2">Campaign</th>
		<th><%= f.text_field :collection_name_cont, class: "form-control input-sm", placeholder: "search:", size: 10 %></th>		
	</tr>		
  </tbody>
  </table>  
 
</div>


<div style='float:left;width: 750px;'>
  <div id="map" style='width: 750px; height: 550px;'></div>
</div>


<div id="infocontent" style="clear:left"> 
        Samples:   <%= paginate @stones %>

        <table class="table table-condensed table-striped">
        <thead>
        <tr>
        <th></th>
        
        <th><%= sort_link @search, :name, "Sample Name" %></th>
        <th><%= sort_link @search, :parent_name, "Sample Parent" %></th>
        <th><%= sort_link @search, :labname, "Labname" %></th>
        <th><%= sort_link @search, :igsn, "IGSN" %></th>   
        <th><%= sort_link @search, :place_name, Place.model_name.human %></th>  
        <th><%= sort_link @search, :classification_name, "classification" %></th>
          <th>Group</th>
        <th><%= sort_link @search, :updated_at, "updated-at" %></th>
        </tr>
        </thead>
        <tbody>
            <%= render partial: :stone, collection: @stones,locals: { checked: false } %>
        </tbody>
        </table>

</div>
      <%end%> 
<script  type="text/javascript">
if (typeof google != 'undefined'){
/*
	var rectangle=null;

        function setupdrawing(map){

		var drawingManager = new google.maps.drawing.DrawingManager({
			drawingMode: null,
			drawingControl: true,
			drawingControlOptions: {
			    position: google.maps.ControlPosition.TOP_CENTER,
			    drawingModes: [google.maps.drawing.OverlayType.RECTANGLE]
			},
			rectangleOptions: {
			    editable: true,
			    draggable: true,
			    fillColor: "red",
			    fillOpacity: 0.1,
			    map: map,
			    strokeColor: "red",
			    strokeWeight: 1
			}
		});		
		drawingManager.setMap(map);
		
		//show the rectangle selected during page load
		var north=parseFloat($('#q_place_latitude_lteq').val());
		var south=parseFloat($('#q_place_latitude_gteq').val());
		var east=parseFloat($('#q_place_longitude_lteq').val());
		var west=parseFloat($('#q_place_longitude_gteq').val());	
		if (!isNaN(north) && !isNaN(south) && !isNaN(east) && !isNaN(west)){
			rectangle=new google.maps.Rectangle({
				    editable: true,
				    draggable: true,
				    fillColor: "red",
				    fillOpacity: 0.1,
				    map: map,
				    strokeColor: "red",
				    strokeWeight: 1,		
				   bounds:{
					   north: north,
					   south: south,
					   east: east,
					   west: west
				   }
			});
			map.fitBounds(rectangle.getBounds());			
		}
		

		google.maps.event.addListener(drawingManager, 'rectanglecomplete', function(rect) {
				
			//clear old rectangle
			if (rectangle){
				rectangle.setMap(null)
				rectangle=null;
			}
			
			//store new rectangle
			rectangle=rect;

			//setup handler for this rectangle
			google.maps.event.addListener(rectangle, 'bounds_changed', function() {		
				var ne = rectangle.getBounds().getNorthEast();
				var sw = rectangle.getBounds().getSouthWest();
				$('#q_place_latitude_gteq').val(sw.lat().toFixed(4));
				$('#q_place_latitude_lteq').val(ne.lat().toFixed(4));
				$('#q_place_longitude_gteq').val(sw.lng().toFixed(4));
				$('#q_place_longitude_lteq').val(ne.lng().toFixed(4));
			});			       

			//store the values
			var ne = rectangle.getBounds().getNorthEast();
			var sw = rectangle.getBounds().getSouthWest();
			$('#q_place_latitude_gteq').val(sw.lat().toFixed(4));
			$('#q_place_latitude_lteq').val(ne.lat().toFixed(4));
			$('#q_place_longitude_gteq').val(sw.lng().toFixed(4));
			$('#q_place_longitude_lteq').val(ne.lng().toFixed(4));
		});
		

       
        }
	

        var handler = Gmaps.build('Google');
        handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
                var markerjson=<%=raw @hash.to_json %>;
                var map=handler.getMap();
                if (markerjson.length == 0)
                       map.setZoom(1);
                var markers = handler.addMarkers(markerjson);
                handler.bounds.extendWith(markers);
                handler.fitMapToBounds();
                if (map.getZoom()>10)
                        map.setZoom(10);
                setupdrawing(map);

	});	
*/

}
$( document ).ready(function() {
        	var map=L.map('map',{ zoomControl:true }).setView([0,0],1);	
		L.tileLayer( 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
		    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
		    subdomains: ['a','b','c']
		}).addTo( map );
		
	        var markers = L.markerClusterGroup();
                var markerjson=<%=raw @hash.to_json %>;	
                var i=0;
                for (i=0; i<markerjson.length; i++){
                        var lat=markerjson[i]["lat"];
                        var lng=markerjson[i]["lng"];
                        var title=markerjson[i]["infowindow"];               
                	var marker = L.marker(new L.LatLng(lat, lng), { title: title });
			marker.bindPopup(title);
			markers.addLayer(marker);
                }
                map.addLayer(markers);     
                
                var drawControl = new L.Control.Draw({
			position: 'topright',
			draw: {
				polygon: false,
				circle: false,
				marker: false,
				polyline: false,
				circlemarker: false,
				rectangle: {
					shapeOptions: {
						color: '#0033ff'
					}
				}
			},
			edit: false
		});
		map.addControl(drawControl);
		
		var rectangle=null;
		
		var north=parseFloat($('#q_place_latitude_lteq').val());
		var south=parseFloat($('#q_place_latitude_gteq').val());
		var east=parseFloat($('#q_place_longitude_lteq').val());
		var west=parseFloat($('#q_place_longitude_gteq').val());	
		if (!isNaN(north) && !isNaN(south) && !isNaN(east) && !isNaN(west)){
		        var location=[[south,west],[north,east]];
			rectangle=L.rectangle(location);
			rectangle.addTo(map);
			map.fitBounds(rectangle.getBounds());			
		}		
		
		map.on('draw:created', function (e) {
			var layer = e.layer;
			var bounds=layer.getBounds();
			var location=[[bounds.getSouth(),bounds.getWest()],[bounds.getNorth(),bounds.getEast()]];
			if (rectangle!=null){
			        rectangle.remove();
			 }
			rectangle=L.rectangle(location);
			rectangle.addTo(map);
		
			$('#q_place_latitude_gteq').val(bounds.getSouth().toFixed(4));
			$('#q_place_latitude_lteq').val(bounds.getNorth().toFixed(4));
			$('#q_place_longitude_gteq').val(bounds.getWest().toFixed(4));
			$('#q_place_longitude_lteq').val(bounds.getEast().toFixed(4));			
			
			map.fitBounds(bounds);
			
			
			
		});  
});
   
        


</script>
